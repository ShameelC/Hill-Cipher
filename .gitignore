import numpy as np

# Helper function to convert lowercase letters to uppercase
def up(letter):
    text1 = ""
    for i in letter:
        if ord('a') <= ord(i) <= ord('z'):
            text2 = chr(ord(i) - 32)
            text1 += text2
        elif ord('A') <= ord(i) <= ord('Z'):
            text2 = i
            text1 += text2
        else:
            print("Not Alphabet")
    return text1

# Helper function to remove spaces from text
def space(s):
    text = ""
    for i in s:
        if ord(i) != 32:
            text += i
    return text

# Function to perform matrix multiplication
def mat(a, b):
    row1 = len(a)
    row2 = len(b)
    col1 = len(a[0])
    col2 = len(b[0])
    result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    for i in range(row1):
        for j in range(col2):
            for k in range(col1):
                result[i][j] += a[i][k] * b[k][j]
    res = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    m = 0
    for row in result:
        res[m] = row
        m += 1
    return res

# Function to calculate the determinant of a 3x3 matrix
def det(m):
    d = m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) - \
        m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) + \
        m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0])
    return d

# Function to convert a letter to its corresponding number (A = 0, B = 1, ..., Z = 25)
def letter_to_number(letter):
    return ord(letter) - ord('A')

# Function to convert a number to its corresponding letter
def number_to_letter(number):
    return chr(number + ord('A'))

# Function to create a 3x3 key matrix from the provided key string
def create_key(key):
    key = up(key)  # Ensure key is in uppercase
    matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    s = 0
    for i in range(3):
        for j in range(3):
            matrix[i][j] = letter_to_number(key[s])
            s += 1
    return matrix

# Function to calculate modular inverse
def mod_inv(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

# Encryption function for the Hill Cipher
def enc(pt, key):
    pt = space(pt)  # Remove spaces from the plaintext
    pt = up(pt)     # Convert plaintext to uppercase

    if len(pt) % 3 != 0:
        pt += 'X' * (3 - len(pt) % 3)  # Pad the plaintext if necessary

    keymat = create_key(key)  # Create the key matrix
    numtext = [letter_to_number(letter) for letter in pt]  # Convert plaintext to numbers

    et = ""  # Encrypted text
    for i in range(0, len(numtext), 3):
        block = [[numtext[i]], [numtext[i + 1]], [numtext[i + 2]]]  # 3x1 block of plaintext numbers
        encrypted_block = mat(keymat, block)  # Multiply by key matrix
        encrypted_block = [[num % 26 for num in row] for row in encrypted_block]  # Modulo 26

        et += number_to_letter(encrypted_block[0][0])
        et += number_to_letter(encrypted_block[1][0])
        et += number_to_letter(encrypted_block[2][0])

    return et

# Decryption function for the Hill Cipher
def dec(ct, key):
    ct = space(ct)  # Remove spaces from the ciphertext
    ct = up(ct)     # Convert ciphertext to uppercase

    keymat = create_key(key)  # Create the key matrix
    determinant = int(round(det(keymat)))  # Calculate the determinant
    mod_inv_det = mod_inv(determinant % 26, 26)  # Find the modular inverse of the determinant

    if mod_inv_det is None:
        return "Error: Key is not invertible."

    # Calculate the inverse key matrix
    adjoint = np.round(np.multiply(np.linalg.det(keymat), np.linalg.inv(keymat))).astype(int) % 26
    inverse_key = (mod_inv_det * adjoint) % 26

    numtext = [letter_to_number(letter) for letter in ct]  # Convert ciphertext to numbers

    pt = ""  # Decrypted plaintext
    for i in range(0, len(numtext), 3):
        block = np.array([[numtext[i]], [numtext[i + 1]], [numtext[i + 2]]])  # 3x1 block of ciphertext numbers
        decrypted_block = np.dot(inverse_key, block) % 26  # Multiply by inverse key matrix

        pt += number_to_letter(decrypted_block[0][0])
        pt += number_to_letter(decrypted_block[1][0])
        pt += number_to_letter(decrypted_block[2][0])

    return pt


# Main loop to interact with the user
key = "GYBNQKURP"  # Example of an invertible key

while True:
    r = create_key(key)  # Create the key matrix
    print("Key matrix:", r)
    pt = input("Enter Plain Text: ")  # Input plaintext
    c = enc(pt, key)  # Encrypt plaintext
    print("Cipher Text:", c)
    p = dec(c, key)  # Decrypt ciphertext
    print("Decrypted Text:", p)

    x = p.find('X')  # Check if padding exists
    if x != -1:
        p = p[:x]  # Remove padding
    print("Decrypted Plain Text:", p)
